from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

SLEEP_TIME, WAKE_TIME, NAP_QUESTION, NAP_DURATION = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–æ —Å–∫–æ–ª—å–∫–æ —Ä–µ–±—ë–Ω–æ–∫ –∑–∞—Å–Ω—É–ª –Ω–æ—á—å—é? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 21:30)")
    return SLEEP_TIME

async def sleep_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["sleep_time"] = update.message.text
    await update.message.reply_text("–í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å–Ω—É–ª—Å—è —É—Ç—Ä–æ–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 07:30)")
    return WAKE_TIME

async def wake_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["wake_time"] = update.message.text
    keyboard = [["–î–∞", "–ù–µ—Ç"]]
    await update.message.reply_text("–ë—ã–ª –ª–∏ –¥–Ω–µ–≤–Ω–æ–π —Å–æ–Ω?", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
    return NAP_QUESTION

async def nap_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == "–¥–∞":
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –¥–ª–∏–ª—Å—è –¥–Ω–µ–≤–Ω–æ–π —Å–æ–Ω? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1—á 20–º)")
        return NAP_DURATION
    else:
        context.user_data["nap_duration"] = "0"
        return await save_data(update, context)

async def nap_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nap_duration"] = update.message.text
    return await save_data(update, context)

async def save_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    response = (
        "–°–ø–∞—Å–∏–±–æ! –í–æ—Ç —á—Ç–æ —è —Å–æ—Ö—Ä–∞–Ω–∏–ª:\n"
        f"üåô –ó–∞—Å–Ω—É–ª: {data['sleep_time']}\n"
        f"‚òÄÔ∏è –ü—Ä–æ—Å–Ω—É–ª—Å—è: {data['wake_time']}\n"
        f"üõå –î–Ω–µ–≤–Ω–æ–π —Å–æ–Ω: {data['nap_duration']}"
    )
    await update.message.reply_text(response)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

if __name__ == "__main__":
    import os
    TOKEN = os.getenv("TELEGRAM_TOKEN")  # –ü–æ–¥–∫–ª—é—á–∞–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤—Å—Ç–∞–≤—å –ø—Ä—è–º–æ

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SLEEP_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, sleep_time)],
            WAKE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, wake_time)],
            NAP_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, nap_question)],
            NAP_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, nap_duration)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()
